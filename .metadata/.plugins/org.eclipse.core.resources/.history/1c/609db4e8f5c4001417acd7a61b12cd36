import java.util.ArrayList;
import java.util.Scanner;

public class prob15 {
	public static final java.util.Scanner rf(String filename) {
		try {
			return new java.util.Scanner(new java.io.File(filename));
		} catch (java.io.FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	public static final void pround(double n, int digits) {
		System.out.printf("%." + digits + "f\n", n);
	}
	public static final double round(double n, int digits) {
		return Double.parseDouble(String.format("%." + digits + "f", n));
	}
	public static final java.util.regex.Matcher regex(String pattern, String text)
	{
		return regex(pattern, text, false, false);
	}
	public static final java.util.regex.Matcher regex(String pattern, String text, boolean caseinsensitive)
	{
		return regex(pattern, text, caseinsensitive, false);
	}
	public static final java.util.regex.Matcher regex(String pattern, String text, boolean caseinsensitive, boolean multiline)
	{
		int flags = (caseinsensitive ? java.util.regex.Pattern.CASE_INSENSITIVE : 0) + (multiline ? java.util.regex.Pattern.MULTILINE : 0);
		java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, flags);
		java.util.regex.Matcher m = p.matcher(text);
		return m;
	}
	
	

	public static void main(String[] args) {
		Scanner in = rf("prob15-1-in.txt");
		int sets = in.nextInt();
		in.nextLine();
		String acro;
		String line = "";
		ArrayList<String> words;
		String ip;
		String[] res;
		for(int i = 0; i < sets; i++) {
			words = new ArrayList<String>();
			res = {"COMPLETE", "SIMPLE"};
			line = in.nextLine();
			String[] split = line.split(" ");
			String acron = split[0];
			ArrayList<String> wordslist = new ArrayList<String>();
			for(int k = 0; k < words.size(); k++) {
				if(words.get(k).indexOf("-") != -1) {
					String[] spl2 = words.get(k).split("-");
					for(int l = 0; l < spl2.length; l++) {
						wordslist.add(spl2[l]);
					}
				} else{
					wordslist.add(words.get(k));
				}
			}
			for(int k = 0; k < wordslist.length; k++) {
				words.add()
			}
		}
	}

}