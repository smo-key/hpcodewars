import java.util.Scanner;

public class prob19 {
	public static final java.util.Scanner rf(String filename) {
		try {
			return new java.util.Scanner(new java.io.File(filename));
		} catch (java.io.FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	public static final void pround(double n, int digits) {
		System.out.printf("%." + digits + "f\n", n);
	}
	public static final double round(double n, int digits) {
		return Double.parseDouble(String.format("%." + digits + "f", n));
	}
	public static final java.util.regex.Matcher regex(String pattern, String text)
	{
		return regex(pattern, text, false, false);
	}
	public static final java.util.regex.Matcher regex(String pattern, String text, boolean caseinsensitive)
	{
		return regex(pattern, text, caseinsensitive, false);
	}
	public static final java.util.regex.Matcher regex(String pattern, String text, boolean caseinsensitive, boolean multiline)
	{
		int flags = (caseinsensitive ? java.util.regex.Pattern.CASE_INSENSITIVE : 0) + (multiline ? java.util.regex.Pattern.MULTILINE : 0);
		java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, flags);
		java.util.regex.Matcher m = p.matcher(text);
		return m;
	}
	
	
	static final char[][] battleship = {
		{'X'},
		{'X'},
		{'X'},
		{'X'}
	};
	static final char[][] carrier = {
		{'-', '-', 'X'},
		{'-', 'X', 'X'},
		{'X', 'X', '-'},
		{'X', '-', '-'}
	};
	static final char[][] destroyer = {
		{'X', '-', 'X'},
		{'X', '-', 'X'},
		{'X', 'X', 'X'},
		{'X', 'X', 'X'}
	};
	static final char[][] frigate = {
		{'-', 'X', '-'},
		{'X', 'X', 'X'},
		{'X', 'X', 'X'},
		{'-', 'X', '-'}
	};
	static final char[][] gunner = {
		{'X', 'X'},
		{'X', 'X'},
		{'X', 'X'},
		{'X', 'X'}
	};
	public static void main(String[] args) {
		Scanner in = rf("prob19-1-in.txt");
		
	}
	int numTimesInArr(char[][] a, char[][] grid, boolean battleship) {
		int count = 0;
		for(int i = 0; i < a.length - grid.length; i++) {
			for(int o = 0; o < a[i].length - grid[0].length; o++) {
				lab: {
					for(int p = 0; p < grid.length; p++) {
						for(int k = 0; k < grid[p].length; k++) {
							if(a[i][o] != grid[p][k] || (o < a[i].length - 1 && a[i][o+1] != 'X')) {
								break lab;
							}
						}
					}
					count++;
				}
			}
		}
		return count;
	}

}